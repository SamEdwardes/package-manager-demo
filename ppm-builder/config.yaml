jenkins:
  systemMessage: "Automated build system for Posit Package Manager package publishing\n\n"
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  securityRealm:
    local:
      allowsSignup: false
      users:
       - id: "admin"
         password: "admin"
credentials:
  system:
    domainCredentials:
      - credentials:      
        - string:
            scope: GLOBAL
            id: "PACKAGEMANAGER_TOKEN"
            secret: "${PPM_TOKEN}"
            description: "API Token for Posit Package Manager"
        - basicSSHUserPrivateKey:
            description: "SSH Key for accessing Git Repositories"
            id: "GIT_SSH_KEY"
            privateKeySource:
              directEntry:
                privateKey: "${GIT_SSH_KEY}"
            scope: GLOBAL
security:
  gitHostKeyVerificationConfiguration:
    sshHostKeyVerificationStrategy: "acceptFirstConnectionStrategy"
  globalJobDslSecurityConfiguration:
    useScriptSecurity: false
unclassified:
  location:
    url: http://localhost:8083/
jobs:
  - script: |
      job('builder-generator-r') {
          description('Posit Package Manager R Build Job Generator')
          scm {
              git {
                  remote {
                      github('jvroberts/ppm-builder', 'ssh')
                      branches('main')
                      credentials('GIT_SSH_KEY')
                  }
              }
          }
          triggers {
              scm('H/5 * * * *')
          }
          steps {
              dsl {
                  text('''
      folder('r-builders') {
          description('R Package Builders')
      }
      def repos = streamFileFromWorkspace('r-repos.txt')
      repos.eachLine { String repoUrl -> 
          def jobName = 'r-builders/' + repoUrl.substring(repoUrl.lastIndexOf('/') + 1)
          pipelineJob(jobName) {
              description('Autogenerated builder for ' + repoUrl)
              displayName(repoUrl)
              properties{
                  githubProjectUrl(repoUrl)
              }
              definition {
                  cps {
                      script(readFileFromWorkspace('r-builder.groovy').replace('!!!REPO_URL!!!', repoUrl))
                      sandbox()
                  }
              }
          }
          if (!jenkins.model.Jenkins.instance.getItemByFullName(jobName)) {
          queue(jobName)
          }
      }
      '''
                  )
              }
          }
      }